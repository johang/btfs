#!/usr/bin/env python
# copyright 2015 johan gunnarsson <johan.gunnarsson@gmail.com>

from __future__ import print_function

import sys
import os
import os.path
import tempfile
import shutil
import time
import subprocess
import argparse


extensions = ("mp4", "m4v", "mkv", "avi",
              "mpg", "mpeg", "flv", "webm")

players = (("omxplayer", "--timeout 60"),
           ("vlc", "--file-caching 10000"),
           ("mpv", ),
           ("mplayer", "--cache-min=1"))


def which(x):
    for d in os.getenv("PATH", "").split(":"):
        if os.path.exists(os.path.join(d, x)):
            return os.path.join(d, x)


def find_player(players):
    for player in players:
        if which(player[0]):
            return player


def find_files(filepath):
    for dirpath, dnames, fnames in os.walk(filepath):
        for f in fnames:
            yield os.path.join(dirpath, f)


def is_sample(filename):
    return "sample" in os.path.basename(filename).lower()


def is_video(filename):
    return any(filename.lower().endswith(i) for i in extensions)


def exit(tempdir, status):
    shutil.rmtree(tempdir)
    sys.exit(status)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-p", "--player",
                        action="store", help="player to launch")
    parser.add_argument("URI", action="store",
                        help="magnet link or HTTP metadata URL to play")
    args = parser.parse_args()

    player = find_player([args.player.split()] if args.player else players)

    if not player:
        print("Could not find a player", file=sys.stderr)
        sys.exit(1)

    mountpoint = tempfile.mkdtemp(prefix="btplay-")
    failed = subprocess.call(["btfs", args.URI, mountpoint])

    if failed:
        exit(mountpoint, failed)

    try:
        while not os.listdir(mountpoint):
            time.sleep(0.25)

        media = sorted(i for i in find_files(mountpoint)
                       if not is_sample(i) and is_video(i))

        if media:
            status = subprocess.call(list(player) + media)
        else:
            status = 1
            print("No video media found", file=sys.stderr)
    except KeyboardInterrupt:
        status = 1
    except Exception as e:
        print("Error:", e, file=sys.stderr)
        status = 2
    finally:
        subprocess.call(["fusermount", "-z", "-u", mountpoint])

    exit(mountpoint, status)


if __name__ == '__main__':
    main()
